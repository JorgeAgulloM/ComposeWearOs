package com.example.android.wearable.composestarter.presentation.screensimport androidx.compose.foundation.layout.*import androidx.compose.material.icons.Iconsimport androidx.compose.material.icons.rounded.Homeimport androidx.compose.material.icons.rounded.Imageimport androidx.compose.material.icons.rounded.SelectAllimport androidx.compose.runtime.*import androidx.compose.ui.Alignmentimport androidx.compose.ui.Modifierimport androidx.compose.ui.draw.clipimport androidx.compose.ui.graphics.RectangleShapeimport androidx.compose.ui.unit.dpimport androidx.navigation.NavControllerimport androidx.wear.compose.material.*import com.example.android.wearable.composestarter.components.OptionMenuimport com.example.android.wearable.composestarter.navigation.WearScreensimport com.example.android.wearable.composestarter.presentation.theme.wearColorPalette@Composablefun ButtonsScreen(navController: NavController) {    Scaffold(modifier = Modifier.fillMaxSize()) {        var cButton by remember { mutableStateOf(false) }        var nButton by remember { mutableStateOf(false) }        var checked by remember { mutableStateOf(false) }        val modifier = Modifier            .fillMaxWidth()            .padding(horizontal = 16.dp, vertical = 8.dp)        Column(            modifier = Modifier                .fillMaxSize()                .padding(16.dp),            verticalArrangement = Arrangement.Center,            horizontalAlignment = Alignment.CenterHorizontally        ) {            OptionMenu(                modifier = modifier,                text = "Compact",                icon = Icons.Rounded.Home,                navController = navController,                goToScreen = WearScreens.HomeScreen.name            )            Row(                modifier = Modifier                    .fillMaxWidth()                    .padding(8.dp),                horizontalArrangement = Arrangement.Center,                verticalAlignment = Alignment.CenterVertically            ) {                Text(                    modifier = Modifier.padding(8.dp),                    text = "Normal Button",                    color = if (nButton) wearColorPalette.primary                    else wearColorPalette.primaryVariant                )                Button(onClick = { nButton = !nButton }) {                    Icon(imageVector = Icons.Rounded.Home, contentDescription = "Normal button")                }            }            Row(                modifier = Modifier                    .fillMaxWidth()                    .padding(horizontal = 16.dp, vertical = 8.dp),                horizontalArrangement = Arrangement.Center,                verticalAlignment = Alignment.CenterVertically            ) {                Text(                    modifier = Modifier.padding(8.dp),                    text = "Toggle",                    color = if (checked) wearColorPalette.primary                    else wearColorPalette.primaryVariant                )                ToggleButton(                    checked = checked, onCheckedChange = {                        checked = !checked                    },                    colors = ToggleButtonDefaults.toggleButtonColors(checkedBackgroundColor = wearColorPalette.primary)                ) {                    Icon(imageVector = Icons.Rounded.SelectAll, contentDescription = "Toggle button")                }            }        }    }}