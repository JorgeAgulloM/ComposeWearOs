package com.example.android.wearable.composestarter.presentation.screensimport android.annotation.SuppressLintimport androidx.compose.foundation.layout.*import androidx.compose.runtime.Composableimport androidx.compose.runtime.mutableStateOfimport androidx.compose.ui.Modifierimport androidx.compose.ui.res.painterResourceimport androidx.compose.ui.text.TextStyleimport androidx.compose.ui.text.font.FontWeightimport androidx.compose.ui.unit.dpimport androidx.compose.ui.unit.spimport androidx.navigation.NavControllerimport androidx.wear.compose.material.*import com.example.android.wearable.composestarter.Rimport com.example.android.wearable.composestarter.components.ReturnHomeimport com.example.android.wearable.composestarter.presentation.theme.wearColorPalette@SuppressLint("UnrememberedMutableState")@Composablefun CardsScreen(navController: NavController) {    val state = rememberScalingLazyListState()    val vignettePosition = mutableStateOf(VignettePosition.TopAndBottom)    val showVignettePosition = mutableStateOf(true)    Scaffold(        positionIndicator = {            PositionIndicator(                scalingLazyListState = state,                modifier = Modifier            )        },        vignette = {            if (showVignettePosition.value) {                Vignette(vignettePosition = vignettePosition.value)            }        },        modifier = Modifier.fillMaxSize()    ) {        ScalingLazyColumn(            state = state,            flingBehavior = ScalingLazyColumnDefaults.snapFlingBehavior(state = state)        ) {            item {                Column() {                    ReturnHome(navController = navController)                    ListHeader {                        Text(                            text = "Cards List Header",                            style = TextStyle(                                color = wearColorPalette.primaryVariant,                                fontWeight = FontWeight.Bold,                                fontSize = 16.sp                            )                        )                    }                }            }            items(10) { card ->                TitleCard(                    modifier = Modifier                        .height(150.dp)                        .padding(8.dp),                    onClick = {},                    title = {                        Text(                            text = "Card",                            style = TextStyle(fontSize = 16.sp, fontWeight = FontWeight.Bold)                        )                    },                    backgroundPainter = CardDefaults.imageWithScrimBackgroundPainter(                        backgroundImagePainter = painterResource(id = R.drawable.ntt_data)                    ),                    contentColor = MaterialTheme.colors.onSurface,                    titleColor = MaterialTheme.colors.onSurface                ) {                    Text(text = "Hello from Card nยบ $card")                }            }        }    }}